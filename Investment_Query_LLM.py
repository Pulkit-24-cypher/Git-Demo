import streamlit as st
import sqlite3
import pandas as pd
#import requests
import os
from transformers import pipeline
from langchain_community.llms import HuggingFaceHub 

# Hugging Face API Key
HF_API_KEY = os.getenv("HF_API_KEY")  # store token in env variable
headers = {"Authorization": f"Bearer {HF_API_KEY}"}

# Updated Available Models (verified working models)
MODEL_OPTIONS = {   
    "GPT-2": {"id":"gpt2","task":"text-generation"},
    "FLAN-T5 Small": {"id":"google/flan-t5-small","task":"text2text-generation"},
    "FLAN-T5 Base": {"id":"google/flan-t5-base","task":"text2text-generation"},
    "Kosmos-2.5":{"id":"microsoft/kosmos-2.5","task":"text-generation"},
    "LongCat-Flash":{"id":"meituan-longcat/LongCat-Flash-Chat","task":"text-generation"}
}

st.set_page_config(page_title="Query Tool with LLM Insights", layout="wide")

st.markdown("<h1 style='text-align: center;'>üí∞ Investment Incentive Query Tool</h1>", unsafe_allow_html=True)

# DB Connection
DB_PATH = r"/Users/pulkitsharan/Downloads/Investment_Incetive.db"


# Function to fetch data
def run_query(query):
    conn = sqlite3.connect(DB_PATH)
    try:
        df = pd.read_sql_query(query, conn)
        conn.close()
        return df
    except Exception as e:
        st.error(f"Database connection error: {e}")
        return None

# SQL query input
query = st.text_area("Enter your SQL query:", "SELECT * FROM Incentive LIMIT 10;")

# Run Query
if st.button("Run Query"):
    conn = get_db_connection()
    if conn:
        try:
            df = pd.read_sql_query(query, conn)
            st.dataframe(df)
            # Store dataframe in session state for LLM analysis
            st.session_state['query_result'] = df
            st.session_state['last_query'] = query
        except Exception as e:
            st.error(f"Error: {e}")
        finally:
            conn.close()

# Select LLM model
st.sidebar.header("‚öôÔ∏è LLM Settings")
selected_model = st.sidebar.selectbox("Choose Model:", list(MODEL_OPTIONS.keys()))
Model_cfg=MODEL_OPTIONS[selected_model]


def get_llm(Model_cfg):
    return HuggingFaceHub(
        repo_id=Model_cfg['id'],
        huggingfacehub_api_token=HF_API_KEY,
        task=Model_cfg['task'],
        model_kwargs={"temperature":0.7, "max_new_tokens":200,'return_full_text':False}
    )

# Get LLM Insights
if st.button("Get AI Insights"):
    if 'query_result' not in st.session_state:
        st.warning("Please run a SQL query first!")
    else:
        try:
            df = st.session_state['query_result']
            query = st.session_state['last_query']
            Model_cfg = MODEL_OPTIONS[selected_model]
           

            prompt = f"Analyze this financial data (sample):{df} generated by executing SQL query: {query} Give clear insights."

            llm = get_llm(Model_cfg)
            
            


            with st.spinner(f"Analyzing with {selected_model}..."):
            
                  # LangChain ka magic
                st.subheader("ü§ñ AI Insights")
                st.write(completion.choices[0].message.content)        #Completion object ka content(Dictinoary nahi hai therefore accessing the content key by .contet)
              
                
           
            
        except Exception as e:
            st.error(f"Error while generating insights: {e}")


# API Key Check
if not HF_API_KEY:
    st.sidebar.error("‚ö†Ô∏è HF_API_KEY environment variable not set!")
    st.sidebar.info("Set your Hugging Face API key as an environment variable named 'HF_API_KEY'")
else:
    st.sidebar.success("‚úÖ API Key loaded")

# Instructions
with st.sidebar.expander("üìñ Instructions"):
    st.write("""
    1. **Set API Key**: Ensure HF_API_KEY environment variable is set
    2. **Run SQL Query**: Execute your query to get data
    3. **Choose Model**: Select an LLM model from the dropdown
    4. **Get Insights**: Click to analyze your data with AI
    """)

# Close any open connections
try:
    if 'conn' in locals():
        conn.close()
except:
    pass